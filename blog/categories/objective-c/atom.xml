<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-C | 杨叫兽的技术博客]]></title>
  <link href="http://nijino.cn/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://nijino.cn/"/>
  <updated>2013-10-09T23:31:48+08:00</updated>
  <id>http://nijino.cn/</id>
  <author>
    <name><![CDATA[杨叫兽]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[KVC技巧二则]]></title>
    <link href="http://nijino.cn/blog/2013/07/02/using-kvc/"/>
    <updated>2013-07-02T14:31:00+08:00</updated>
    <id>http://nijino.cn/blog/2013/07/02/using-kvc</id>
    <content type="html"><![CDATA[<p>说两个与KVC相关的技巧。</p>

<p>1.KVC与字典</p>

<p>有时候我们需要取出嵌套字典中的某个键的值。例如某个嵌套字典：</p>

<p><code>   NSDictionary *dict = @{@"subDict":@{@"subKey":@"aStr"}};</code></p>

<p>需要取出<code>subKey</code>这个键的值。以前总是用<code>valueForKey</code>嵌套的语法来做，其实根本不用那么麻烦，直接利用<code>valueForKeyPath</code>方法就可以实现。代码如下：</p>

<pre><code>NSString *str = [dict valueForKeyPath:@"subDict.subKey"];
</code></pre>

<!-- more -->


<p>2.KVC实现高阶消息传递</p>

<p>有时候需要对数组中每个对象调用某一个方法后生成新的数组，我们可以利用KVC的高阶消息传递功能来实现。例如有下面这样一个数组：</p>

<p><code>   NSArray *originArr = @[@"octopress",@"nijino",@"saki"];</code></p>

<p>我想将这个数组中的每一个元素首字母大写，然后生成新的数组，如果按照常规做法需要利用快速枚举对数组每一个元素进行操作，并且还要分配一个空数组来存储处理过的元素。</p>

<p>而利用KVC的高阶消息传递，只需一句话就可以达到目的：</p>

<pre><code>NSArray *resultArr = [originArr valueForKey:@"capitalizedString"];
</code></pre>

<p>这样一步就实现了需求。</p>

<p>小结：</p>

<p>KVC是Objective－C特有的语法现象，可以加以利用实现代码的简洁性和可维护性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用NSString的Hash方法比较字符串]]></title>
    <link href="http://nijino.cn/blog/2013/06/19/nsstring-hash/"/>
    <updated>2013-06-19T14:10:00+08:00</updated>
    <id>http://nijino.cn/blog/2013/06/19/nsstring-hash</id>
    <content type="html"><![CDATA[<p>实际编程总会涉及到比较两个字符串的内容，一般会用</p>

<p><code>[string1
isEqualsToString:string2]</code></p>

<p>来比较两个字符串是否一致。对于字符串的isEqualsToString方法，需要逐个比较字符串的内容，是比较耗时的操作。</p>

<p>偶然间我发现NSString类里有个hash方法，作用是返回NSString实例的散列值。众所周知，内容相同的字符串拥有相同的散列值，内容不同的字符串拥有不同的散列值。所以完全可以根据字符串散列值来判断两个字符串是否一致。</p>

<p>于是上面比较字符串的写法可以这么写（一般比较字符串是if语句的判断条件）：</p>

<p><code>if ([string1 hash] == [string2 hash]){  
}</code></p>

<!-- more -->


<p>实践中发现了一个问题：有时候字符串返回的散列值为负数，而苹果文档说hash方法一定返回无符号数，不知是不是位数问题造成的。</p>

<p><img src="/images/nsstring-hash.png" alt="image" /></p>

<p>例如：</p>

<pre><code>NSString *string1 = @"yyb";
NSString *string2 = @"nijino_saki";
NSLog(@"string1 hash %d",[string1 hash]);
NSLog(@"string2 hash %d",[string2 hash]);  
</code></pre>

<p>输出结果为：</p>

<p>  2013-06-19 18:47:11.612 test[26719:c07] string1 hash 530522127</p>

<p>2013-06-19 18:47:11.613 test[26719:c07] string2 hash -975949159</p>
]]></content>
  </entry>
  
</feed>
